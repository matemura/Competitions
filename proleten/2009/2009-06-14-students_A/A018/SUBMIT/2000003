/*
user: A018
pass: 5r41ot
*/
#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <cstring>
#include <ctime>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>
#include <set>
#include <vector>
#include <bitset>
#include <queue>
#include <map>

using namespace std;

#define F(i,n) for (int i=0;i<n;i++)
#define Repi(n) F(i,n)
#define Repj(n) F(j,n)
#define Repk(n) F(k,n)
#define PI pair<int,int>
#define LL long long
#define PD pair<double,double>
#define PQ priority_queue
#define sqr(x) ((x)*(x))
#define VI vector<int>
#define MP make_pair
#define SZ size()
#define x first
#define y second
#define PB push_back

#define Time (double)clock()/CLOCKS_PER_SEC
#define ABS(x) (((x)>0)?(x):(-(x)))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define sign(a) (((a)>0)-((a)<0))

const int MAXN=100002;

int N;
int a[MAXN];
LL sum[MAXN];
const int INF=1000000000;
const LL LINF=1000000000000000001LL;

LL summ(int l,int r)
{ if (l>r) return 0; if (!l) return sum[r]; return sum[r]-sum[l-1]; }

int dp[1024][1024];
int root[1024][1024];

int solve(int l,int r)
{
	int &ret=dp[l][r];
	if (ret>-1) return ret;
	if (l>=r) { root[l][r]=l; return ret=0;}
	
	ret=INF; root[l][r]=-1;
	for (int i=l;i<r;i++)
	 {
	 	int tmp=solve(l,i) + solve(i+1,r);
	 	tmp+=summ(l,i)+summ(i+1,r);
	 	//cout<<"          "<<l<<" "<<r<<" root at "<<i<<" -> "<<tmp<<"\n";
	 	if (tmp<ret)
	 	 {  ret=tmp; root[l][r]=i; }
	 }
	
	//cout<<l<<" "<<r<<" goto "<<root[l][r]<<" -> "<<ret<<"\n";
	return ret;
}

void print(int l,int r,int lev)
{
	if (l>r) return;
	if (l==r) { Repi(lev) cout<<"   "; cout<<a[l]<<" ("<<lev<<")\n"; return; }
	print(root[l][r]+1,r,lev+1);
	print(l,root[l][r],lev+1);	
}



LL dpp[MAXN];

void solve2()
{
	dpp[N]=dpp[N-1]=0;
	
	for (int pos=N-2;pos>=0;pos--)
	 {
		LL lev=1,all=2,levsubstr;
		dpp[pos]=LINF;
		LL substr=(pos)?sum[pos-1]:0;
		
		cout<<" at "<<pos<<" ("<<a[pos]<<")\n";
		
		for (int i=pos;i<N;i++)
	 	{
	 		if ( i-pos+2>all )
	 		 all*=2,lev++;
	 		levsubstr=__builtin_ctz(all-(i-pos+1));
	 		cout<<"        "<<i<<" : lev "<<lev<<" levs "<<levsubstr<<" all  "<<all<<" (sum "<<(sum[N-1]-substr)<<") \n";
	 		
	 		LL tmp=(sum[i]-substr)*lev + (sum[N-1]-sum[i])*(lev-levsubstr) + dpp[i+1];
	 		cout<<"               "<<tmp<<" = "<<(sum[i]-substr)<<"*"<<lev<<" + "<<(sum[N-1]-sum[i])<<"*"<<(lev-levsubstr)<<" + "<<dpp[i+1]<<"\n";
	 		dpp[pos]=min(dpp[pos],tmp);
	 	}
	 	cout<<" = "<<dpp[pos]<<" ("<<dp[pos][N-1]<<")"<<"\n";
	 	
	 }
}

int main()
{
	scanf("%d",&N);
	Repi(N)
		scanf("%d",a+i);
	sort(a,a+N); reverse(a,a+N);
	Repi(N) cout<<a[i]<<" "; cout<<"\n";
	LL ts=0;
	Repi(N)
	 ts+=a[i],sum[i]=ts;
	
	memset(dp,-1,sizeof(dp));
	printf ("%d\n",solve(0,N-1));
	return 0;
	
	print(3,N-1,0);
	
	cout<<"\n\n\n\n";
	solve2();
	
	return 0;
}
