#include <cstdio>
#define maxN (1<<21)

int n,k,r_pos;
int list[maxN];
long long sum[maxN];
long long br[maxN];
long long res=-1;

void push(long long* tree, int pos, long long v)
{
    while (pos <= (1<<20)) {
        tree[pos] += v;
        pos += (pos&(-pos));
        }
}

long long pop(long long* tree, int pos)
{
    long long r=0;
    while (pos>0) {
        r += tree[pos];
        pos -= (pos&(-pos));
        }
    return r;
}

void binary(int p)
{
    long long sol1,sol2;
    int l=1,r=1000010,m,h;
    while (l<r) {
        m = (l+r)/2;
        h=m; sol1 = pop(br,h-1)*h-pop(sum,h-1) + (pop(sum,(1<<20))-pop(sum,h)) - (pop(br,(1<<20))-pop(br,h))*h;
        h=m+1; sol2 = pop(br,h-1)*h-pop(sum,h-1) + (pop(sum,(1<<20))-pop(sum,h)) - (pop(br,(1<<20))-pop(br,h))*h;
        //printf("l=%d m=%d r=%d %d?%d\n",l,m,r,sol1,sol2);
        if (sol1<sol2) r = m;
        else if (sol1>sol2) l = m+1;
        else {
            if (sol1<res || res == -1) {res=sol1;r_pos=p;}
            //printf("-->%d %d\n",sol1,p);
            return;
            }
        }
    h=l; sol1 = pop(br,h-1)*h-pop(sum,h-1) + (pop(sum,(1<<20))-pop(sum,h)) - (pop(br,(1<<20))-pop(br,h))*h;
    if (sol1<res || res == -1) {res=sol1;r_pos=p;}
    //printf("-->%d %d\n",sol1,p);
}

void solve()
{
    int i,j,t;
    for (i=0;i<k;++i) {
        push(sum,list[i],list[i]);
        push(br,list[i],1);
        }
    binary(1);
    for (i=k;i<n;++i) {
        push(sum,list[i-k],-list[i-k]);
        push(br,list[i-k],-1);
        push(sum,list[i],list[i]);
        push(br,list[i],1);
        binary(i-k+2);
        }
    printf("%lld\n%d\n",res,r_pos);
}

int main()
{
    scanf("%d%d",&n,&k);
    for (int i=0;i<n;++i) {scanf("%d",&list[i]);++list[i];}
    solve();
    return 0;
}
