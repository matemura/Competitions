/*
TASK: flatten
LANG: C++
*/
#include <stdio.h>
#include <map>

using namespace std;

long long cent, above, below;
int A[1000000];
map<int, int> heap;
map<int, int>::iterator it;

long long ans;
long long cpriceb, cpriceab;
int N, K;
    
void optimize()
{
     map<int, int>::iterator itup = it;
     itup++;
     
     int priceup = -1, pricedown = -1;
     
     if (itup != heap.end())
     {
              long long newpriceb = cpriceb + (below + (*it).second)*((*itup).first - (*it).first);
              long long newpriceab = cpriceab - above*((*itup).first - (*it).first);
              //printf("%d %d\n", (*it).first, (*it).second);
              if (newpriceb + newpriceab < cpriceb + cpriceab)
              {
                   cpriceb = newpriceb;
                   cpriceab = newpriceab;
                   
                   below += (*it).second;
                   above -= (*itup).second;
                   cent = (*itup).first;
                   it++;
                   return;
              }
     } 
     if (it != heap.begin())
     {
              map<int, int>::iterator itdown = it;
              itdown--;
              
              long long newpriceab = cpriceab + (above + (*it).second)*((*it).first - (*itdown).first);
              long long newpriceb = cpriceb - below*((*it).first - (*itdown).first);

              if (newpriceb + newpriceab < cpriceb + cpriceab)
              {
                   cpriceb = newpriceb;
                   cpriceab = newpriceab;
                   
                   below -= (*itdown).second;
                   above += (*it).second;
                   cent = (*itdown).first;
                   it--;
                   return;
              }
    }
}
int main()
{
    scanf("%d%d", &N, &K);
    for (int i = 0; i < N; i++) scanf("%d", &A[i]);
    
    heap[A[0]]++;
    it = heap.begin();
    
    //printf("%d %d\n", (*it).first, (*it).second);
    //system("pause");
    //return 0;
    
    cent = A[0];
    above = 0, below = 0;
    
    for (int i = 1; i < K - 1; i++)
    {
        //pintf("%d %d\n", A[i], cent);
        //printf("%d\n", below);
        if (A[i] < cent) below++, cpriceb += cent - A[i];
        else if (A[i] > cent) above++, cpriceab += A[i] - cent;
        
        heap[A[i]]++;
        //printf("%I64d\n", below);
        
        optimize();
    }
    
    
    
    
    long long ans = 10000000000000LL;
    int ansi = -1;
    for (int i = K-1; i < N; i++)
    {
        if (A[i] < cent) below++, cpriceb += cent - A[i];
        else if (A[i] > cent) above++, cpriceab += A[i] - cent;
        
        heap[A[i]]++;
        
        //printf("before: %I64d %I64d %I64d\n", cent, cpriceb, cpriceab);
        optimize();
        //printf("after: %I64d %I64d %I64d\n", cent, cpriceb, cpriceab);
        
        if (ans > cpriceab + cpriceb)
        {
                ans = cpriceab + cpriceb;
                ansi = i+1;
        }
        
        if (A[ i - K + 1 ] < cent) below--, cpriceb -= cent - A[i - K + 1];
        else if (A[ i - K + 1] > cent) above--, cpriceab -= A[i - K + 1] - cent;
        
        int t = --heap[A[ i - K + 1]];
        if (t == 0)
        {
              if (A[i - K + 1] == cent){
              //printf("h\n");
              
              map<int, int>::iterator save = it;
              
              
              if (below >= above)
              {
        //             printf("s\n");
                     it--;
                     cpriceb -= below*(cent - (*it).first);
                     below -= (*it).second;
                     cpriceab += above*(cent - (*it).first);
                     cent = (*it).first;
              }
              else
              { 
                     it++;
                     cpriceb += below*((*it).first - cent);
                     cpriceab -= above*((*it).first - cent);
                     above -= (*it).second;
                     
                     cent = (*it).first;
              }
              
              heap.erase(save);
              }
              else heap.erase(A[i - K + 1]);
        }
        //printf("               ***\n");
        //printf("before: %I64d %I64d %I64d\n", cent, cpriceb, cpriceab);
        optimize();
        //printf("after: %I64d %I64d %I64d\n", cent, cpriceb, cpriceab);
    }
    
    printf("%lld\n%d\n", ans, ansi - K + 1);
    return 0; 
}
