#include <queue>
#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

const int MAXN = 12;

vector < int > f;
vector < int > e;

int n , m , c , t;
vector < int > a[MAXN];
int dp[1 << MAXN];
int col[MAXN];
int marked[MAXN];
		
queue < int > q;
		
void read() {
	int i;
	int x , y;
	
	scanf ( "%d%d%d%d" , &n , &m , &c , &t );
	for (i = 0; i < n; i++) {
		scanf ( "%d" , &col[i] );
		a[i].clear();
		col[i] ^= c;
	}
	
	while ( m -- ) {
		scanf ( "%d%d" , &x , &y );
		a[x].push_back ( y );
		a[y].push_back ( x );
	}
}

void dfs ( int x , int mask ) {
	marked[x] = 1;
	int i;
	
	for (i = 0; i < (int)a[x].size(); i++) 
		if ( !!(mask & (1 << x)) == !!(mask & (1 << a[x][i])) && !marked[ a[x][i] ] )
			dfs ( a[x][i] , mask );
}

int solve1() {
	memset ( dp , -1 , sizeof dp );
	int i , j;
	int mask = 0 , nmask;
	
	for (i = n - 1; i >= 0; i--)
		mask = (mask << 1) | col[i];
	
	dp[mask] = 0;
	q.push ( mask );
	while ( !q.empty() ) {
		mask = q.front();
		q.pop();
		
	//	printf ( "%d   %d\n" , mask , dp[mask] );
		
		for (i = 0; i < n; i ++) {
			memset ( marked , 0 , sizeof marked );
			dfs ( i , mask );
			
			nmask = mask;
			
		//	if ( mask == 127 )
		//	printf ( "cyk %d   " , i );
			for (j = 0; j < n; j++)
				if ( marked[j] ) {
		//		if ( mask == 127 )		printf ( "   %d" , j );
					nmask ^= (1 << j);
				}
		//		if ( mask == 127 )printf ( "\n" );
			
			if ( dp[nmask] == -1 ) {
				dp[nmask] = dp[mask] + 1;
				q.push ( nmask );
			}
		}
	}
	//printf ( "\n" );
	
	return dp[0] * t;
}

void solve2() {
	int i , j;
	int p1 , p2;
	int sum = 0;
	int tot = 0;
	int l , r , mid;
	int ans = 1 << 30;
	n = (int)f.size();
	
//	for (i = 0; i < (int)f.size(); i++)		printf ( "%d\n" , f[i] );
	
	for (i = 0; i < n; i++) tot += f[i];
	
	p1 = n / 2;
	p2 = n - p1;
	
	for (i = 0; i < (1 << p1); i++) {
		sum = 0;
		
		for (j = 0; j < n; j++)
			if ( i & (1 << j) )
				sum += f[j];
		
		e.push_back ( sum );
	}
	
	sort ( e.begin() , e.end() );
	
	for (i = 0; i < (1 << p2); i++) {
		sum = 0;
		
		for (j = 0; j < n; j++)
			if ( i & (1 << j) )
				sum += f[p1 + j];
		
		l = 0;
		r = (int)e.size() - 1;
		
		while ( l < r ) {
			mid = l + (r - l + 1) / 2;
			
			if ( e[mid] + sum < tot - e[mid] - sum )
				l = mid;
			else
				r = mid - 1;
		}
		
		if ( max ( e[l] + sum , tot - e[l] - sum ) < ans )
			ans = max ( e[l] + sum , tot - e[l] - sum );
		++ l;
		if ( max ( e[l] + sum , tot - e[l] - sum ) < ans )
			ans = max ( e[l] + sum , tot - e[l] - sum );
	}
	
	printf ( "%d\n" , ans );
}

int main() {
	int cases;
		
	scanf ( "%d" , &cases );
	while ( cases -- ) {
		read();
		f.push_back ( solve1() );
	}
	
	solve2();
	
	return 0;
}
