#include <iostream>
#include <vector>
using namespace std;

int n, m;
int col [60];
int col2 [60];
int used[60];
int nomer[60];
int what, cost;
vector <int> a[60];
vector <int> b[60];
int br = 1;

void dfs(int pos, int id)
{
	nomer [pos] = id;
	int i;
	for (i = 0; i < a[pos].size(); i++)
	{
		if (nomer[a[pos][i]] == 0&&col [pos] == col[a[pos][i]]) {dfs(a[pos][i], id);}
		else
			if (nomer[a[pos][i]] && col [pos] != col[a[pos][i]]) 
		{
			b[nomer[pos]].push_back(nomer[a[pos][i]]);
			b[nomer[a[pos][i]]].push_back(nomer[pos]);
		}
	}
}

pair <int, int> dfs2 (int pos, int dist, int touse)
{
	pair <int, int> ret; ret.first = dist; ret.second = pos;
	used[pos] = touse;
	int i;
	for (i =0; i<b[pos].size ();i++)
	{
		if (used[b[pos][i]]!= touse)
		{
			pair <int, int> tmp = dfs2(b[pos][i], dist+1, touse);
			ret = max (ret, tmp);
		}
	}
	return ret;
}
int solve ()
{
	//a.clear(); 
	//b.clear();
	
	memset (used, 0, sizeof (used));
	memset (nomer, 0, sizeof (nomer));
	br = 1;
	int i;
	for (i = 0; i < 60; i++) a[i].clear(), b[i].clear();
		
	scanf ("%d%d%d%d", &n, &m, &what, &cost);
	
	for (i = 1; i <= n; i++)
		scanf ("%d", &col[i]);
	
	for (i = 0; i < m; i++)
	{
		int u, v;
		scanf ("%d%d", &u, &v);
		a[u+1].push_back(v+1);
		a[v+1].push_back(u+1);		
	}
	
	for (i = 1; i <= n; i++)
		if (nomer[i] == 0) {col2[br] = col[i]; dfs(i, br++);}
	int ret = 0;
for (i = 1; i < br; i++)
{
	if (!used[i])
	{
	pair <int, int> temp = dfs2 (i, 0, 1);
	
	 temp = dfs2 (temp.second, 0, 2);
	if (temp.first %2 == 0) {ret+= temp.first/2; if (what != col2[temp.second])ret++;} 
	else
		ret+= temp.first/2+1;
	}
}		
	//cout << ret*cost <<endl;
	return ret*cost;
	
}

int B[64];
bool DP[7000000];
int main ()
{
	int L ;
	scanf ("%d", &L);
	int i;int sum = 0;
	for (i = 0; i < L; i++)
	{
	   B[i] = solve ();
	   sum += B[i]; 	
	   //cout << B[i]<<endl;
	}
	sort (B, B+L);
	int hs = sum / 2;
	DP[0] = 1;
	int MX = 0;
	int j;
	for (i = 1; i <=hs; i++)
	{
		for (j = 0; j < L && B[j] <= i ; j++)
		     if (DP[i - B[j]] == 1) {DP[i] = 1; break;}
	if (DP[i] == 1) MX = i;
	}
	
	printf ("%d\n", sum - MX);
	
	return 0;
}