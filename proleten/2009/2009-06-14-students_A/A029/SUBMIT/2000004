#include <cstdio>

#define MAXN 1048576

int nums[MAXN], n, k;

struct itree {
	int data[MAXN];

	int query(int to) {
		int res = 0;
		for(int i = to; i > 0; i -= i&(-i)) {
			res += data[i];
		}
		return res;
	}
	void add(int to, int n) {
		for(int i = to; i < MAXN; i += i&(-i)) {
			data[i] += n;
		}
	}
	int find_mid() {
		int start = 1, end = MAXN, mid, val;
		while(start < end-1) {
			mid = (start+end)/2;
			val = query(mid);
			if(val < k/2) {
				start = mid;
			} else if(val > k/2) {
				end = mid;
			} else {
				return mid;
			}
		}
		return start;
	}
} tree;

inline int absd(int a, int b) {
	return ((a > b)-(a < b))*(a-b);
}

int sumd(int from, int n, int d) {
	int res = 0;
	for(int i = from, l = from+n; i < l; ++i) {
		res += absd(d, nums[i]);
	}
	return res;
}

int main() {
	scanf("%d%d", &n, &k);
	for(int i = 0; i < n; ++i)  {
		scanf("%d", nums+i);
		++nums[i];
	}
	for(int i = 0; i < k; ++i) tree.add(nums[i], 1);
	int mincost = 1<<30, minat;
	for(int i = 0; 1; ++i) {
		int mid = tree.find_mid();
		int cost = sumd(i, k, mid);
		if(cost < mincost) {
			mincost = cost;
			minat = i;
		}

		if(i+k >= n)
			break;
		tree.add(nums[i], -1);
		tree.add(nums[i+k], 1);
	}
	printf("%d\n%d\n", mincost, minat+1);
	return 0;
}
