#include <iostream>
#include <math.h>
using namespace std;

struct point
{
       int x, y;
       bool operator<(point p)const{if (x!=p.x) return x < p.x; return y < p.y;}
       point(int _x, int _y):x(_x), y(_y){}
       point operator-(point p){ return point(x - p.x, y - p.y); }
       point(){}
} P[300];
int N;

int cross(point p1, point p2)
{
    return p1.x*p2.y - p1.y*p2.x;
}

double dist(point p1, point p2)
{
       return sqrt((p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y));
}

int main()
{
    cin >> N;
    for (int i = 0; i < N; i++) cin >> P[i].x >> P[i].y;
    sort(P, P + N);
    
    point Ans[300];
    Ans[0] = P[0];
    Ans[1] = P[1];
    int last = 1;
    
    for (int i = 2; i < N; i++)
    {
        while (last >= 1)
         if (cross(Ans[last] - Ans[last-1], P[i] - Ans[last]) > 0) break;
         else last--;
        Ans[++last] = P[i];
    }
    for (int i = N-1; i >= 0; i--)
    {
        while (last >= 1)
         if (cross(Ans[last] - Ans[last-1], P[i] - Ans[last]) > 0) break;
         else last--;
       Ans[++last] = P[i];
    }
    
//    for (int i = 0; i <= last; i++) cout << Ans[i].x << " " << Ans[i].y << endl;
    double ret = 0;
    for (int i = 0; i < last; i++) ret += dist(Ans[i], Ans[i+1]);
    cout << ceil(ret) << endl;
    return 0; 
}
