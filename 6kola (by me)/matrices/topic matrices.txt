Измисляме dp row by row:

dp[row][0] = a0 * dp[row-1][0] + b0 * dp[row-1][1] + c0 * dp[row-1][2] + d0 * dp[row-1][3] + ......

dp[row][1] = a1 * dp[row-1][0] + b1 * dp[row-1][1] + c1 * dp[row-1][2] + d1 * dp[row-1][3] + ......

dp[row][2] = a2 * dp[row-1][0] + b2 * dp[row-1][1] + c2 * dp[row-1][2] + d2 * dp[row-1][3] + ......

dp[row][3] = a3 * dp[row-1][0] + b3 * dp[row-1][1] + c3 * dp[row-1][2] + d3 * dp[row-1][3] + ......

.................. и т.н.

като тези коефициенти са константи за всеки следващ ред, с изключение на нулевия (row = 0), който ни е зададен в началото.

ако гледаме dp[row] като вектор и от коефициентите създадем матрица M = 

[ a0 b0 c0 d0 ... ]
[ a1 b1 c1 d1 ... ]
[ a2 b2 c2 d2 ... ]
[ a3 b3 c3 d3 ... ]
[ .................... ]

то имаме M * dp[row] = dp[row + 1]
Така, например, dp[4] = M * dp[3] ; dp[1] = M * dp[0] ; dp[5] = M * M * M * M * M * dp[0]

Обобщено dp[n] = (M ^ n) * dp[0]



Например, за числата на фибоначи имаме dp[0] = { 1, 0 }   // текущо число, предишно число
dp[j][0] = 1 * dp[j-1][0] + 1 * dp[j-1][1]
dp[j][1] = 1 * dp[j-1][0] + 0 * dp[j-1][1]

Или матрицата M ни е
[ 1 1 ]
[ 1 0 ]

За да намерим dp[n] трябва да пресметнем

[ 1 1 ] ^ n        [ 1 ]
[ 1 0 ]         *   [ 0 ]


Ето тук има още по темата: http://www.topcoder.com/tc?module=Static&d1=features&d2=010408
Да припомним бързото повдигане на степен: http://6kola.eblahfree.com/Blah.pl?b-2/m-1233613592/s-new/

[i]
Ето и задачки
	nth fibonacci
	number of paths of length X between each pair of vertices in graph
	sum of geometric progression
	zimni/2009/aminosoup
	shumen/2009/A/reading
	srm 428/div1/500
	srm 397/div1/500 (sum of powers)
	tccc/2006/championship round/div1/500
	srm 377/div1/500 (game on graph)
	srm 444/div1/1000 (avoid four)
	srm 443/div1/shuffledplaylist
	srm 403/div1/theluckysequence
	srm 377/div1/1000 (alien language)
	srm 306/div1/1000 (number of cycles of length <= k)
	srm 377/div1/1000
[/i]
