Задача 1

Класическа "задача за раницата" (knapsack) - за всяко възможно тегло на множество от монети, образувано с първите 1..k вида, пазим най-малката и най-голямата стойност. При добавяне на k+1-вия вид, обхождаме тези възможни тегла и пробваме да подобрим стойността на новополученото тегло, добавяйки новата монета към всяко от тях. Добавяме я и към новите тегла от k+1-ви вид (образувани със самата нея - еквивалентно на поставяне на k+1-вата монета няколко пъти). Редът на обхождане на монетите няма значение, тъй като няма значение реда на вземането им в множествата. Но редът на обхождане на сумите при слагане на нов вид монети трябва да е нарастващ, именно за да може неколкократно да бъде използвана монета от този вид. Сложността е O(N*S)

Задача 2

Също knapsack-задача, само че тук пазим за всяка сума единствено дали може да се достигне, като при добавяне на нов елемент обхождаме досега стигнатите суми и го добавяме към всяка от тях. Тук, за разлика от предходната задача, редът на обхождане на сумите за всяко ново число трябва да е намаляващ, за да избегнем добавянето на нов елемент към сума, която е била образувана с него самия. Това може да стане също и като пазим достигнатите суми в масив, като на края му добавяме новите, но същевременно пазим и стария му край (преди слагането на новия елемент), за да не добавим новия елемент към някоя от новите суми. Този допълнителен масив значително подобрява и сложността (тъй като не обхождаме неизползвани суми).

Задача 3

Също класическа задача. Решение би било равнината да се раздели на "квадратчета" със страна 1 и целочислени координати на ъглите, като за всеки правоъгълник обхождаме и маркираме квадратчетата, които покрива. Накрая просто броим маркираните квадратчета. Сложността е O(N*(MAXX-MINX)*(MAXY-MINY)), което в най-лошия случай надхвърля ограниченията на задачата по памет и време. Подобрение на това решение е равината да се раздели на правоъгълници с координати единствено от множеството координати във входа, като така всеки правоъгълник от входа се разделя напълно от непокриващи се такива правоъгълничета (един вид "компресиране" на равината). На всяко правоъгълниче се съпоставят координати както на квадратчетата. Аналогично се обхождат и маркират правоъгълничетата и накрая просто се сумира лицето им, като за всяко маркирано правоъгълниче се добавя лицето му (при първата версия на решението се прибавя 1). Сложността е O(N^3), тъй като максималният брой различни X или Y координати e 2*N. Това е и приложеното решение. Друг вариант е да се използва sweep line алгоритъм в комбинация с двоично индексно дърво, или интервално дърво, давайки сложност N^2logN или NlogN, но това не е необходимо предвид ограниченията на задачата.

Задача 4

Отново правим компресиране на равнината. Тук вариант за решение е да отбележим на всяко покрито квадратче (в действителност правоъгълниче, но за удобство ще ги считаме за квадратчета, тъй като тук лицето няма значение) кои ръбове са покрити, като така знаем от него в кои съседни квадратчета можем да отидем. Стандартен алгоритъм за обхождане (BFS или DFS) би свършил работа. Може да се подходи малко по-различно. Приложеното решение оцветява всяко квадратче, като в началото равнината е с цвят 0. При добавяне на нов правоъгълник, всички квадратчета от цвят x, които той покрива, се пребоядисват на някакъв неизползван цвят (за да се разделят от непокритите си "събратя" по цвят, но все пак да останат от една област). По този начин накрая ще останат оцветени области от квадратчета, като никои две различни области с еднакъв цвят няма да се допират (да имат обща страна на квадратче). Няколко DFS-та обхождат и преброяват тези области. Сложността е O(N^3) заради самото маркиране.

Задача 5

Може да се направи пълно изчерпване със сложност O(2^N*N), при което просто се генерират всички числа и се сумират (в приложената реализация то е коментирано).
По-ефективен вариант е динамично да се изчисли сумата, като последователно се смята отговора за всяко число, образувано от първите k цифри на даденото (или префиксите на N). Ако сме намерили отговора за префикс с дължина k (=dp[k]), при добавяне на k+1-вата цифра се получават 3 групи числа, образуващи новата сума:
1) числата, образуващи сумата за k, които ще се запазят (сумата им е dp[k])
2) числата, образуващи сумата за k, но с новата цифра накрая (сумата им е dp[k]*10 + x*cnt, където x е k+1-вата цифра, а cnt е броят на числата)
3) новата цифра x сама
като броят cnt също се намира динамично - всеки път той се удвоява (заради групи 1 и 2) и му се прибавя 1 (заради група 3). Сложността е O(K), където K=log10(N).


