<html>
<head>
<meta HTTP-EQUIV="Pragma" CONTENT="no-cache">
<script language="javascript">
<!--
    var endtime;
    
    function initcount(secondsleft) {
        var now = new Date();
        return now.getTime() + secondsleft*1000;
    }
    function count1(i) { i = i - i%1; return i; } 
    function count2(i) { i = i - i%1; if (i < 10) return "0"+i; return i; }
    function updateclock(head, word, endtime) {
        var now = new Date();
        var delta = (endtime - now.getTime())/1000;
        var s, x;
        if(delta < 1)
            s = head + " has ended";
        else{
            s = head + " ends: ";
            s = head + ": ";
            if(delta >= 24*3600)
                s = s + count1(delta/86400) + "d";
            if(delta >= 3600)
                s = s + count2((delta/3600)%24) + "h";
            if(delta >= 60)
                s = s + count2((delta/60)%60) + "m";
            s = s + count2(delta%60) + "s";
            setTimeout("updateclock('"+head+"','"+word+"',"+endtime+")", 500);
        }

        var slot = document.getElementById(word);
        slot.innerHTML = s;
    }
-->
</script>

<title>USACO Problems</title>
</head>
<body onload="" background='/usaco/bg9gold.jpg'>

<font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'>
<table><tr>
<td><img src='/usaco/cowhead2.gif'>
</td>
<td valign='top'>
<table cellpadding=0 cellspacing=0>
    <tr><td>Contest: DEC08 <b>GOLD</b> Division</td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
    
</table>
</td></tr>
</table>
<font color=red><b>
</b></font>

<br><font size='6'<b>ANALYSIS MODE</b></font><br>
Submit solutions for your own enjoyment.

</font><pre>NOTE: Each problem has a point value. Your goal is to maximize the
number of points you score. Your score is the sum of your three
highest-scoring submissions. Increase your score by correctly solving
tasks; maximize your score by correctly solving tasks with the
higher point values.

**********************************************************************
                           GOLD PROBLEMS
**********************************************************************
                  Four problems numbered 1 through 4
**********************************************************************

Problem 1: Trick or Treat on the Farm [Jacob Steinhardt, 2008]

Every year in Wisconsin the cows celebrate the USA autumn holiday
of Halloween by dressing up in costumes and collecting candy that
Farmer John leaves in the N (1 &lt;= N &lt;= 100,000) stalls conveniently
numbered 1..N.

Because the barn is not so large, FJ makes sure the cows extend
their fun by specifying a traversal route the cows must follow.  To
implement this scheme for traveling back and forth through the barn,
FJ has posted a "next stall number" next_i (1 &lt;= next_i &lt;= N) on
stall i that tells the cows which stall to visit next; the cows
thus might travel the length of the barn many times in order to
collect their candy.

FJ mandates that cow i should start collecting candy at stall i.
A cow stops her candy collection if she arrives back at any stall
she has already visited.

Calculate the number of unique stalls each cow visits before being
forced to stop her candy collection.

POINTS: 100

PROBLEM NAME: treat

INPUT FORMAT:

* Line 1: A single integer: N

* Lines 2..N+1: Line i+1 contains a single integer: next_i

SAMPLE INPUT (file treat.in):

4
1
3
2
3

INPUT DETAILS:

Four stalls.
* Stall 1 directs the cow back to stall 1.
* Stall 2 directs the cow to stall 3
* Stall 3 directs the cow to stall 2
* Stall 4 directs the cow to stall 3

OUTPUT FORMAT:

* Lines 1..N: Line i contains a single integer that is the total
        number of unique stalls visited by cow i before she returns to
        a stall  she has previously visited.

SAMPLE OUTPUT (file treat.out):

1
2
2
3

OUTPUT DETAILS:

Cow 1:  Start at 1, next is 1.  Total stalls visited: 1.
Cow 2:  Start at 2, next is 3, next is 2.  Total stalls visited: 2.
Cow 3:  Start at 3, next is 2, next is 3.  Total stalls visited: 2.
Cow 4:  Start at 4, next is 3, next is 2, next is 3. Total stalls visited: 3.

**********************************************************************

Problem 2: Secret Message [David Benjamin and Jacob Steinhardt, 2008]

Bessie is leading the cows in an attempt to escape! To do this, the
cows are sending secret binary messages to each other.

Ever the clever counterspy, Farmer John has intercepted the first
b_i (1 &lt;= b_i &lt;= 10,000) bits of each of M (1 &lt;= M &lt;= 50,000) of
these secret binary messages.

He has compiled a list of N (1 &lt;= N &lt;= 50,000) partial codewords
that he thinks the cows are using. Sadly, he only knows the first
c_j (1 &lt;= c_j &lt;= 10,000) bits of codeword j.

For each codeword j, he wants to know how many of the intercepted
messages match that codeword (i.e., for codeword j, how many times
does a message and the codeword have the same initial bits).  Your
job is to compute this number.

The total number of bits in the input (i.e., the sum of the b_i and
the c_j) will not exceed 500,000.

Memory Limit: 32MB

POINTS: 270

PROBLEM NAME: sec

INPUT FORMAT:

* Line 1: Two integers: M and N

* Lines 2..M+1: Line i+1 describes intercepted code i with an integer
        b_i followed by b_i space-separated 0's and 1's

* Lines M+2..M+N+1: Line M+j+1 describes codeword j with an integer
        c_j followed by c_j space-separated 0's and 1's

SAMPLE INPUT (file sec.in):

4 5
3 0 1 0
1 1
3 1 0 0
3 1 1 0
1 0
1 1
2 0 1
5 0 1 0 0 1
2 1 1

INPUT DETAILS:

Four messages; five codewords.
The intercepted messages start with 010, 1, 100, and 110.
The possible codewords start with 0, 1, 01, 01001, and 11.

OUTPUT FORMAT:

* Lines 1..M: Line j: The number of messages that the jth codeword
        could match.

SAMPLE OUTPUT (file sec.out):

1
3
1
1
2

OUTPUT DETAILS:

0 matches only 010: 1 match
1 matches 1, 100, and 110: 3 matches
01 matches only 010: 1 match
01001 matches 010: 1 match
11 matches 1 and 110: 2 matches

**********************************************************************

Problem 3: Winning Checkers [Rob Kolstad, 2008]

The cows have taken up the game of checkers with a vengeance.
Unfortunately, despite their unlimited enjoyment of playing, they
are terrible at the endgame and want your help.

Given an NxN (4 &lt;= N &lt;= 500) checkboard, determine the optimal set
of moves (i.e., smallest number of moves) to end the game on the
next move. Checkers move only on the '+' squares and capture by
jumping 'over' an opponent's piece in the traditional way. The piece
is removed as soon as it is jumped.  See the example below where
N=8:

- + - + - + - +  The K's mark Bessie's kings; the o's represent the
+ - + - + - + -  opponent's checkers. Bessie always moves next. The
- + - K - + - +  Kings jump opponent's checkers successively in any
+ - + - + - + -  diagonal direction (and removes pieces when jumped).
- o - o - + - +
+ - K - + - + -  For this board, the best solution requires the lower
- o - + - + - +  left King to jump successively across all three of the
+ - K - + - K -  opponents' checkers, thus ending the game (moving K
                 marked as &gt;K&lt;):
  
   Original          After move 1       After move 2        After move 3
- + - + - + - +     - + - + - + - +    - + - + - + - +     - + - + - + - +
+ - + - + - + -     + - + - + - + -    + - + - + - + -     + - + - + - + -
- + - K - + - +     - + - K - + - +    - + - K - + - +     - + - K - + - +
+ - + - + - + -     + - + - + - + -    + -&gt;K&lt;- + - + -     + - + - + - + -
- o - o - + - +     - o - o - + - +    - + - o - + - +     - + - + - + - +
+ - K - + - + -    &gt;K&lt;- K - + - + -    + - K - + - + -     + - K -&gt;K&lt;- + -
- o - + - + - +     - + - + - + - +    - + - + - + - +     - + - + - + - +
+ -&gt;K&lt;- + - K -     + - + - + - K -    + - K - + - K -     + - K - + - K -
                   
The moves traversed these squares:

  1 2 3 4 5 6 7 8           R C
1 - + - + - + - +    start: 8 3
2 + - + - + - + -    move:  6 1
3 - + - K - + - +    move:  4 3
4 + - * - + - + -    move:  6 5
5 - o - o - + - +
6 * - K - * - + - 
7 - o - + - + - + 
8 + - K - + - K - 
 
Write a program to determine the game-ending sequence for an NxN
input board if it exists. There is at least a king and at least one
opponent piece on the board. The king can jump a piece on every move
of the optimal solution.

POINTS: 330

PROBLEM NAME: winchk

INPUT FORMAT:

* Line 1: A single integer: N

* Lines 2..N+1: Line i+1 contains N characters (each one of: '-', '+',
        'K', or 'o') that represent row i of a proper checkboard. Line
        2 always begins with '-'.

SAMPLE INPUT (file winchk.in):

8
-+-+-+-+
+-+-+-+-
-+-K-+-+
+-+-+-+-
-o-o-+-+
+-K-+-+-
-o-+-+-+
+-K-+-K-

OUTPUT FORMAT:

* Lines 1..?: If there is no winning sequence of jump, output
        "impossible" on a line by itself. If such a sequence exists,
        each line contains two space-separated integers that represent
        successive locations of a king whose moves will win the game.
        Any such sequence is acceptable.

SAMPLE OUTPUT (file winchk.out):

8 3
6 1
4 3
6 5

**********************************************************************

Problem 4: Largest Fence [Zoran Dzunic, 2008]

Farmer John has purchased N (5 &lt;= N &lt;= 250) fence posts in order
to build a very nice-looking fence. Everyone knows the best fences
are convex polygons where fence posts form vertices of a polygon.
The pasture is represented as a rectilinear grid; fencepost i is
at integer coordinates (x_i, y_i) (1 &lt;= x_i &lt;= 1,000; 1 &lt;= y_i &lt;=
1000).

Given the locations of N fence posts (which, intriguingly, feature
no set of three points which are collinear), what is the largest
number of fence posts FJ can use to create a fence that is convex?

For test cases worth 45% of the points for this problem, N &lt;= 65.

Time limit: 1.2 seconds
POINTS: 400

PROBLEM NAME: fence

INPUT FORMAT:

* Line 1: A single integer: N

* Lines 2..N+1: Line i+1 describes fence post i's location with two
        space-separated integers: x_i and y_i

SAMPLE INPUT (file fence.in):

6
5 5
2 3
3 2
1 5
5 1
1 1

INPUT DETAILS:

A square with two points inside.

OUTPUT FORMAT:

* Line 1: A single integer, the maximum possible number of fence posts
        that form a convex polygon.

SAMPLE OUTPUT (file fence.out):

5

OUTPUT DETAILS:

The largest convex polygon is the pentagon (2,3), (3,2), (5,1), (5,5), (1,5).

**********************************************************************

</pre><hr>
<form action="/ioiupload" enctype="multipart/form-data" method="POST">
<input type="hidden" name="a" value="lkT6zS3vudp">

<table>
<tr><td>

<table bgcolor="#000000" cellpadding=0 cellspacing=0 border=0 width=100%>
<tr><td height=1></td></tr>
<tr><td width=1><td>

  <font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'>
  <table bgcolor="#bfffbf" cellpadding=5 width=100%>
  <tr><td><b>Submit a program  for grading:&nbsp;<b><input type="file" NAME="filename">
  &nbsp;&nbsp;
  <input type="submit" VALUE="Submit" name='submit'></td></tr>
  </table>

</td><td width=1></td></tr>
<tr height=1><td></td></tr>
</table>


</td></tr>

<tr><td><hr></td></tr>

<tr><td>

<table bgcolor="#000000" cellpadding=0 cellspacing=0 border=0 width=100%>
<tr><td height=1></td></tr>
<tr><td width=1><td>

   <table bgcolor="#bfffbf" cellpadding=5 width=100%>
   <tr><td colspan='2'>
   <font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'>
   <b>To run your program with your own test data, enter the program<br>
   file name and input file name then click 'Test':</b></td></tr>

  <tr><td>

   <table>
   <tr><td>
     <table>
     <tr><td>
     <font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'>
     <B>Program&nbsp;File:&nbsp;</B></td>
         <td><input type="file" NAME="testprogramname"></td></tr>
     <tr><td align="right">
         <font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'>
         <B>Input&nbsp;File:&nbsp;</B></td>
         <td><input type="file" NAME="testfilename"></td></tr>
     </table>
   </td>
   <td>&nbsp;&nbsp;</td>
   <td><input type="submit" VALUE="Test" name='submit'></td>
   </tr>
   </table>

   </td></tr></table>

</td><td width=1></td></tr>
<tr height=1><td></td></tr>
</table>

</tr></td>
<tr><td><hr></td></tr>

<tr><td>

<table bgcolor="#000000" cellpadding=0 cellspacing=0 border=0 width=100%>
<tr><td height=1></td></tr>
<tr><td width=1><td>

<table bgcolor="#bfffbf" cellpadding=5 width=100%>
<tr><td>
<font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'>
<b>Backup a file:&nbsp;</b><input type="file" NAME="backupfilename">
&nbsp;&nbsp;&nbsp;<input type="submit" VALUE="Backup" NAME='submit'>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<input type="submit" VALUE="See Backups" NAME='submit'>
</td></tr></table>

</td><td width=1></td></tr>
<tr height=1><td><td></tr>
</table>

</td></tr>

<tr><td><hr></td></tr>

</table>
<tr><td><font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'> The following solution files are saved for grading:<br>
<table cellspacing='2'>
<tr><th>Name</th><th>Size</th><th>When</th><th>Age</th></tr>
<td><a href="/ioiupload?a=lkT6zS3vudp&seesaved=fence.c">fence.c</a></td>
<td align ='right'>4073</td>
<td align ='right'> 1h41:04</td>
<td align ='right'>83h35:45</td></tr>
<td><a href="/ioiupload?a=lkT6zS3vudp&seesaved=sec.c">sec.c</a></td>
<td align ='right'>2597</td>
<td align ='right'> 1h56:47</td>
<td align ='right'>83h20:02</td></tr>
<td><a href="/ioiupload?a=lkT6zS3vudp&seesaved=treat.c">treat.c</a></td>
<td align ='right'>2368</td>
<td align ='right'> 1h13:54</td>
<td align ='right'>84h02:55</td></tr>
<td><a href="/ioiupload?a=lkT6zS3vudp&seesaved=winchk.c">winchk.c</a></td>
<td align ='right'>4497</td>
<td align ='right'> 3h17:15</td>
<td align ='right'>81h59:34</td></tr>
</table></td></tr>
<hr>
<center>
<a href="/ioiedit?a=lkT6zS3vudp">Edit your database record</a>&nbsp;|&nbsp;

<a href="/ioiupload?a=lkT6zS3vudp&logout=1"> Logout </a>
<!--<a href="https://ace.delos.com/rules.html" target="_blank"> Rules </a>-->
&nbsp;|&nbsp;
<a href=http://ace.delos.com/ioiupload?init=1&a=lkT6zS3vudp>Main contest index</a>
</center>
<!--&nbsp;|&nbsp;-->
<center>
<a href=http://ace.delos.com/ioiupload?a=lkT6zS3vudp&showsubmit>See submitted solutions</a>
&nbsp;|&nbsp;
<a href=http://ace.delos.com/ioiupload?a=lkT6zS3vudp&suggestionbox>Send message
to operations staff</a><br>
Director is not online<br>
This page was generated at 20:16:49 GMT.
</center>
</body>
