<html>
<head>
<meta HTTP-EQUIV="Pragma" CONTENT="no-cache">
<script language="javascript">
<!--
    var endtime;
    
    function initcount(secondsleft) {
        var now = new Date();
        return now.getTime() + secondsleft*1000;
    }
    function count1(i) { i = i - i%1; return i; } 
    function count2(i) { i = i - i%1; if (i < 10) return "0"+i; return i; }
    function updateclock(head, word, endtime) {
        var now = new Date();
        var delta = (endtime - now.getTime())/1000;
        var s, x;
        if(delta < 1)
            s = head + " has ended";
        else{
            s = head + " ends: ";
            s = head + ": ";
            if(delta >= 24*3600)
                s = s + count1(delta/86400) + "d";
            if(delta >= 3600)
                s = s + count2((delta/3600)%24) + "h";
            if(delta >= 60)
                s = s + count2((delta/60)%60) + "m";
            s = s + count2(delta%60) + "s";
            setTimeout("updateclock('"+head+"','"+word+"',"+endtime+")", 500);
        }

        var slot = document.getElementById(word);
        slot.innerHTML = s;
    }
-->
</script>

<title>USACO Problems</title>
</head>
<body onload="endtime = initcount(8484); updateclock('Contest', 'Person', endtime);" background='/usaco/bg9gold.jpg'>

<font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'>
<table><tr>
<td><img src='/usaco/cowhead2.gif'>
</td>
<td valign='top'>
<table cellpadding=0 cellspacing=0>
    <tr><td>Contest: MAR09 <b>GOLD</b> Division</td></tr>
    <tr><td><div id='Person'></div></td></tr>
    <tr><td></td></tr>
    
</table>
</td></tr>
</table>
<font color=red><b>
</b></font>


</font><pre>**********************************************************************
                           GOLD PROBLEMS
**********************************************************************
                  Three problems numbered 1 through 3
**********************************************************************

Problem 1: Moon Mooing [Long Fan, 2008]

A full moon casts some sort of spell on the cows and, like their
cousins the wolves and coyotes, they bay at the moon -- mooing
instead of howling, of course.

Each 'moo' lasts a certain amount of time. A short 'moo' might last
time 1; a longer one might last time 24 or even 1,000,000,000 or
longer (cows can really moo when they want to). No 'moo' will last
more than or equal to 2^63.

It should come as no surprise that the cows have a pattern to their
moos.  Bessie will choose an integer c (1 &lt;= c &lt;= 100) that is the
initial length of a moo.

After Bessie moos for length c, the cows calculate times for
subsequent moos. They apply two formulae to each moo time to yield
even more moo times. The two formulae are:
        f1(c)=a1*c/d1+b1 (integer divide, of course) and
        f2(c)=a2*c/d2+b2.

They then successively use the two new times created by evaluating
f1(c) and f2(c) to create even more mooing times. They keep a sorted
list of all the possible mooing times (discarding duplicates).

They are allowed to moo a total of N times (1 &lt;= N &lt;= 4,000,000).
Please determine the length of the longest moo before they must
quit.

The constants in the formulae have these constraints: 1 &lt;= d1 &lt; a1;
d1 &lt; a1 &lt;= 20; 0 &lt;= b1 &lt;= 20; 1 &lt;= d2 &lt; a2; d2 &lt; a2 &lt;= 20; 0 &lt;= b2
&lt;= 20.

Consider an example where c=3 and N=10. The constants are:
    a1=4    b1=3     d1=3
    a2=17   b2=8     d2=2

The first mooing time is 3, given by the value of c. The total list
of mooing times is:
     1. c=3             -&gt;  3       6. f2(3)=17*3/2+8  -&gt; 33
     2. f1(3)=4*3/3+3   -&gt;  7       7. f1(28)=4*28/3+3 -&gt; 40
     3. f1(7)=4*7/3+3   -&gt; 12       8. f1(33)=4*33/3+3 -&gt; 47
     4. f1(12)=4*12/3+3 -&gt; 19       9. f1(40)=4*40/3+3 -&gt; 56
     5. f1(19)=4*19/3+3 -&gt; 28      10. f1(47)=4*47/3+3 -&gt; 65

The tenth time is 65, which would be the proper answer for this set
of inputs.

Partial feedback will be provided on the first 50 submissions.

MEMORY LIMIT: 64MB

PROBLEM NAME: baying

INPUT FORMAT:

* Line 1: Two space-separated integers: c and N

* Line 2: Three space-separated integers: a1, b1, and d1

* Line 3: Three space-separated integers: a2, b2, and d2

SAMPLE INPUT (file baying.in):

3 10
4 3 3
17 8 2

OUTPUT FORMAT:

* Line 1: A single line which contains a single integer which is the
        length of the Nth moo

SAMPLE OUTPUT (file baying.out):

65

**********************************************************************

Problem 2: Cleaning Up [Paul Christiano, 2007]

In the good old days, Farmer John served a boring cuisine comprising
but a single type of cow food to his N (1 &lt;= N &lt;= 40000) prize dairy
cows. Times change. Today he serves the herd a total of M (1 &lt;= M
&lt;= N) different types of food (conveniently numbered 1..M).

The cows are picky. Cow i has a single food preference P_i (1 &lt;=
P_i &lt;= M) and will eat only that favorite food.

Each day at feeding time FJ converts the barn into a tastefully lit
cafeteria. The cows line up outside to enter the cafeteria in order
of their previously-mentioned convenient index number.

Unfortunately, with so many types of food, cleaning up afterwards
is very time-consuming. If Farmer John is serving K different types
of food, it takes him K*K units of time to clean the barn.

To save time, FJ serves the cows in contiguous groups from the line.
After each group, he cleans up the barn and sets out the food for
the next group (of course, he only sets out food that cows in the
any given group will eat). Determine the minimum amount of total
time FJ must spend cleaning the barn. Each group consists of the
next contiguous group of cows from the line; each cow belongs to
exactly one group; and the barn must be cleaned up after every
group, including the last one.

PROBLEM NAME: cleanup

INPUT FORMAT:

* Line 1: Two space-separated integers: N and M

* Lines 2..N+1: Line i+1 contains a single integer: P_i

SAMPLE INPUT (file cleanup.in):

13 4
1
2
1
3
2
2
3
4
3
4
3
1
4

INPUT DETAILS:

There are four types of food and thirteen cows in line. The first
cow prefers type 1, the second type 2, the third type 1, etc.

OUTPUT FORMAT:

* Line 1: A single integer: the minimum amount of time FJ must spend
        cleaning the  barn.

SAMPLE OUTPUT (file cleanup.out):

11

OUTPUT DETAILS:

The first four groups contain one cow each. The fifth group contains
two cows who prefer food #2 (requiring one unit of time). The sixth
group contains cows preferring foods 3, 4, 3, 4, 3 (and requires
four units of time to clean). The last two groups contain one cow
each. The total time is 11.

**********************************************************************

Problem 3: Earthquake Damage 2 [Hal Burch, Richard Peng, 2008]

Wisconsin has had an earthquake that has struck Farmer John's farm!
The earthquake has damaged some of the pastures so that they are
unpassable. Remarkably, none of the cowpaths was damaged.

As usual, the farm is modeled as a set of P (1 &lt;= P &lt;= 3,000)
pastures conveniently numbered 1..P which are connected by a set
of C (1 &lt;= C &lt;= 20,000) non-directional cowpaths conveniently
numbered 1..C. Cowpath i connects pastures a_i and b_i (1 &lt;= a_i
&lt;= P; 1 &lt;= b_i &lt;= P). Cowpaths might connect a_i to itself or perhaps
might connect two pastures more than once.  The barn is located in
pasture 1.

A total of N (1 &lt;= N &lt;= P) cows (in different pastures) sequentially
contacts Farmer John via moobile phone with an integer message
report_j (2 &lt;= report_j &lt;= P) that indicates that pasture report_j
is undamaged but that the calling cow is unable to return to the
barn from pasture report_j because she could not find a path that
does not go through damaged pastures.

After all the cows report in, determine the minimum number of
pastures that are damaged.

PROBLEM NAME: damage2

INPUT FORMAT:

* Line 1: Three space-separated integers: P, C, and N

* Lines 2..C+1: Line i+1 describes cowpath i with two integers: a_i
        and b_i

* Lines C+2..C+N+1: Line C+1+j contains a single integer: report_j

SAMPLE INPUT (file damage2.in):

5 5 2
1 2
2 3
3 5
2 4
4 5
4
5

OUTPUT FORMAT:

* Line 1: One number, the minimum number of damaged pastures.

SAMPLE OUTPUT (file damage2.out):

1

OUTPUT DETAILS:

Only pasture 2 being damaged gives such a scenario.

**********************************************************************

</pre><hr>
<form action="/ioiupload" enctype="multipart/form-data" method="POST">
<input type="hidden" name="a" value="WWNsEYQmpYv">

<table>
<tr><td>

<table bgcolor="#000000" cellpadding=0 cellspacing=0 border=0 width=100%>
<tr><td height=1></td></tr>
<tr><td width=1><td>

  <font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'>
  <table bgcolor="#bfffbf" cellpadding=5 width=100%>
  <tr><td><b>Submit a program  for grading:&nbsp;<b><input type="file" NAME="filename">
  &nbsp;&nbsp;
  <input type="submit" VALUE="Submit" name='submit'></td></tr>
  </table>

</td><td width=1></td></tr>
<tr height=1><td></td></tr>
</table>


</td></tr>

<tr><td><hr></td></tr>

<tr><td>

<table bgcolor="#000000" cellpadding=0 cellspacing=0 border=0 width=100%>
<tr><td height=1></td></tr>
<tr><td width=1><td>

   <table bgcolor="#bfffbf" cellpadding=5 width=100%>
   <tr><td colspan='2'>
   <font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'>
   <b>To run your program with your own test data, enter the program<br>
   file name and input file name then click 'Test':</b></td></tr>

  <tr><td>

   <table>
   <tr><td>
     <table>
     <tr><td>
     <font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'>
     <B>Program&nbsp;File:&nbsp;</B></td>
         <td><input type="file" NAME="testprogramname"></td></tr>
     <tr><td align="right">
         <font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'>
         <B>Input&nbsp;File:&nbsp;</B></td>
         <td><input type="file" NAME="testfilename"></td></tr>
     </table>
   </td>
   <td>&nbsp;&nbsp;</td>
   <td><input type="submit" VALUE="Test" name='submit'></td>
   </tr>
   </table>

   </td></tr></table>

</td><td width=1></td></tr>
<tr height=1><td></td></tr>
</table>

</tr></td>
<tr><td><hr></td></tr>

<tr><td>

<table bgcolor="#000000" cellpadding=0 cellspacing=0 border=0 width=100%>
<tr><td height=1></td></tr>
<tr><td width=1><td>

<table bgcolor="#bfffbf" cellpadding=5 width=100%>
<tr><td>
<font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'>
<b>Backup a file:&nbsp;</b><input type="file" NAME="backupfilename">
&nbsp;&nbsp;&nbsp;<input type="submit" VALUE="Backup" NAME='submit'>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<input type="submit" VALUE="See Backups" NAME='submit'>
</td></tr></table>

</td><td width=1></td></tr>
<tr height=1><td><td></tr>
</table>

</td></tr>

<tr><td><hr></td></tr>

</table>
<tr><td><font face='Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans'> The following solution files are saved for grading:<br>
<table cellspacing='2'>
<tr><th>Name</th><th>Size</th><th>When</th><th>Age</th></tr>
<td><a href="/ioiupload?a=WWNsEYQmpYv&seesaved=baying.c">baying.c</a></td>
<td align ='right'>1490</td>
<td align ='right'> 5h46:59</td>
<td align ='right'>0h27:28</td></tr>
</table></td></tr>
<hr>
<center>
<a href="/ioiedit?a=WWNsEYQmpYv">Edit your database record</a>&nbsp;|&nbsp;

<a href="/ioiupload?a=WWNsEYQmpYv&logout=1"> Logout </a>
<!--<a href="https://ace.delos.com/rules.html" target="_blank"> Rules </a>-->
&nbsp;|&nbsp;
<a href=http://ace.delos.com/ioiupload?init=1&a=WWNsEYQmpYv>Main contest index</a>
</center>
<!--&nbsp;|&nbsp;-->
<center>
<a href=http://ace.delos.com/ioiupload?a=WWNsEYQmpYv&showsubmit>See submitted solutions</a>
&nbsp;|&nbsp;
<a href=http://ace.delos.com/ioiupload?a=WWNsEYQmpYv&suggestionbox>Send message
to operations staff</a><br>
Director is not online<br>
This page was generated at 12:14:27 GMT.
</center>
</body>
